# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1duCDXsh9Z5ljlp5dBaS3UuU4Tu4U9Ztf
"""

import numpy as np
a=np.array([5,8,11])
b=np.array([(3.5,8,11),(4,7,9)])
#çıkarma=> np.subtract(a,b)
print(a-b,np.subtract(a,b))
#kök alma=>np.sqrt(a)
print(np.sqrt(25))
#logaritma alma => np.log(a)
print(np.log(5))
#ortalama => mean()
print(a.mean())
#tranpoz alma =>np.transpose()
print(np.transpose(b))
#matrixten eleman çıkartma => np.delete(a,i)
print(np.delete(a,[1]))
# iki dizi birleştirme =>np.concatanate()
print(np.concatenate([a,np.arange(0,9,3)],axis=0))

import pandas as pd
s=pd.Series([12,4,24,6],index=['a','b','c','d'])#series tanımlama
'''veriTablo=pd.DataFrame(veri,columns=["ülke","şehir","nüfus"])#2 boyutlu veriyi pandas dataframe yapısına dönüştürme
pd.read_csv('dosya_adı.csv',nrows=7,sep=',')#csv dosyasından veri okumak için
#nrows=verinin içinde bulunun satır sayısını
#sep=dosyanın içindeki 2 veriyi nasıl ayıracağını gösterir
veriTablo.loc(0,0)# konuma göre veri seçimi
veriTablo.log(0,'ülke')#başlığa göre veri seçimi
s.drop(['a','c'])#veri silme
#tablo hakında basil bilgiler
#df.info()-veriTablo.shape()-veriTablo.describe()-veriTablo.min()-veriTablo.mean()
'''
data=[
    ['d1','sunny','hot','high','weak','no'],
    ['d2','sunny','hot','high','weak','no'],
    ['d3','sunny','hot','weak','weak','no'],
    ['d4','rain','cool','strong','weak','no'],
    ['d5','rain','cool','weak','weak','no'],
    ['d6','overcast','cool','high','weak','no'],]
df=pd.DataFrame(data,columns=['day','outlook','temp','humidity','windy','play'])
print(df.info())
print(df.shape)
print(df.describe())

from sklearn import preprocessing,datasets,neighbors
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
iris =datasets.load_iris()
X,y=iris.data[::2],iris.target
x_train,x_test,y_train,t_test=train_test_split(X,y)
scaler=preprocessing.StandardScaler().fit(x_train)
x_train=scaler.transform(x_train)
x_test=scaler.transform(x_test)

#k-means modeli çağırmak için
model=neighbors.KNeighborsClassifier(n_neighbors=5)
model.fit(x_train,y_train)

#modelden tahmin almak
model.predict(X_t)